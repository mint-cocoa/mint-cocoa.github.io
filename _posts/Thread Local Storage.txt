자, 이어서 이번 시간 주제는 ThreadLocalStorage 소위 TLS 라고 불리우는 아이에 대해서 알아보도록 하겠습니다 뭐 , 사실, TLS 는 내용이 굉장히 단순해요 지금까지 생각보다 어려운 내용에 대해서 많이 알아봤는데 TLS 는 좀 쉬어가는 그런 부분이라고 일단 볼 수가 있겠습니다 하지만 쉽고 어렵고는 둘째치고 이 아이가 나중에 우리가 작업할 코드에서 굉장히 유용하게 사용이 될 것이기 때문에 , 일단은, 이 아이가 무엇을 하는 건지 그리고 다시 코드로 돌아가서 간단한 실습을 하고 넘어가도록 할게요. , 자, 그러면 , 일단은, TLS를 왜 써야 되는지 이게 어떤 상황이 유용한지 한번 비유를 해보도록 하겠습니다. 우리가 지금까지 서버를 식당에 비유해서 얘기를 하고 있었고 식당에서 주방도 있고 테이블도 있고 결제 프론트도 있고 뭐 이런 상황이라고 했었죠. 그리고 우리가 락에 대한 개념에 대해서도 알아봤는데 락이라는 걸 화장실 자물쇠에 우리가 비유를 했습니다. 그래서 실질적으로 지금 , 이렇게, 이 별표 모양으로 된 이 아이가 일단 락이라고 볼 수가 있는 거죠. , 자, 그런데 실질적으로 뭐 나중에 MMO를 만들면은 터득하게 되겠지만 락이 꼭 , 이렇게, 뭐 화장실 같은 곳에만 있는 게 아니라 , 사실, 곳곳에 다 락이 배치되어 있을 겁니다 왜냐하면은 우리가 설령 직원들을 잘 배치를 해가지고 지금 지금 상황처럼 2명은 주방에 2명은 테이블 서빙 담당 1명은 결제 담당으로 , 이렇게, 배치를 한다고 해도 정말로 식당 일들이 그렇게 우리가 배분한 대로 고지 곳대로 딱 분리가 되는 건 아니겠죠 어떤 작업을 할 때는 손님이 주문을 받아가지고 주방에 가서 주방장한테 주문서를 건네줘야 될 때고 반대로 주방에서 요리가 나왔으면 그거를 손님한테 다시 서빙을 하기 위해서 주방에서 다시 테이블로 오고 가는 일도 있을 거고 그 다음에 손님이 불러가지고 결제해달라고 카드를 건네주는 상황이 있을거고 어찌됐건 , 이렇게, 딱딱 구역을 나눠가지고 할 수 있는 상황이 아니라 항상 이리저리 오가는 상황이 굉장히 많이 생기게 될겁니다 그러다 보면은 직원들이 어느 한쪽으로 쏠리는 그런 상황이 발생할 수도 있을 뿐만 아니라 애당초 우리가 멀티스레드라는 거에서 쭉 알아봤지만 경합조건 즉 레이스 컨디션이라는 게 일어나면 문제가 된다고 했었죠 그렇기 때문에 한 번에 한 명만 입장을 할 수 있게끔 , 사실, 곳곳에 이런 식으로 락을 걸어가지고 접근할 일이 생기게 될 겁니다 그래서 지금 예를 들면 지금 주방이라고 되어 있는 곳이 이 식당이 좀 특이해서 맨 아래에 있는 곳은 한식 요리를 하는 곳이고 위에는 중식 요리를 하고 위에는 일식 요리를 하고 이런 식으로 주방마다 구조가 조금씩 달라가지고 그걸 이용해 가지고 도구를 이용해 가지고 요리를 하는 상황이 있다고 하면은 , 사실, 모든 손님들이 다 좀 고로고로 어떤 사람은 일식을 시키고 어떤 사람은 한식을 시키면 굉장히 좋겠지만 당연한 얘기지만 그렇게 일상적으로 봐도 메뉴가 어떤 것과 인기가 많을지는 예측할 수 없는 상황이 종종 발생하게 되겠죠 그러다 보니까 게임 로직도 마찬가지로 이게 이제 나중에 보면은 뭐 MMORPG로 비유를 하면은 하나의 구역마다 , 이렇게, 크게 크게 배치를 하는 경우가 생기게 될 겁니다. 예를 들면 뭐 와우로 비유하면은 아지로스 전체 대륙을 요 아이가 담당을 한다거나 하는 식으로 구역마다 , 이렇게, 어느 정도 분리가 되어 가지고 관리를 한다고 가정을 하더라도 실질적으로 일감이 잘 배분이 되면은 문제가 없겠지만 어 뭔가 와우로 치면은 뭔가 아제로스 침공을 한다거나 어떤 사람들이 막 모여가지고 어떤 컨텐츠를 즐기다 보면은 한쪽으로 일감이 막 쏠리는 상황이 발생할 수 있다는 얘기가 되는 거죠 뭐 그래가지고 결국에는 이 멀티스레드에서 가장 중요한 것 중 하나는 결국에는 스레드를 여러 개를 사용하는 것도 중요하긴 하지만 스레드를 여러 개를 사용한다고 모든 일이 해결되는 건 아니고 일감이 적절하게 분배되게끔 이제 유도를 해야 된다는 것도 굉장히 중요한 그런 부분입니다 일감이 몰리게 되면은 필연적으로 경합이 일어나게 되고 같은 데이터를 손으로 꺼낸 쓰기 위해서 막 경합이 일어나게 될 것이고 그 다음에 우리가 락에 대해서 알아봤지만 뭐 스피락을 사용하건 어떤 락을 사용하건 상관없이 결국에는 그렇게 경합이 일어난다고 하면은 실제로 한 번에 한 명만 일을 할 수 있고 나머지들은 대기를 타는 상황이 발생할 수 있다는 얘기가 되는 거죠 그래서 만약에 지금 이런 상황에서 모든 애들이 다 한식을 해달라고 하면은 지금 여기 한식 창구 앞에서 직원들이 , 이렇게, 밀집 돼가지고 주문서를 건네주려고 노력하는 상황이 있다고 가정할 수 있는 겁니다. , 자, 그래가지고 좀 서론이 길었는데 , 자, 요런 상황에서 우리가 그러면 이제 뭐 TLS를 어떻게 응용할 수 있냐 TLS라는 건 무엇이냐에 대해서 알아봐야 될 것 같은데요 , 자, 예를 들면은 여기서 이제 한식을 서빙한다고 가정을 해보면 한식 같은 경우에는 , 일단은, 굉장히 반찬이 많죠 일반적으로 뭐 김치, 김 비롯해가지고 콩나물 등등 온갖 반찬이 있는데 그 반찬을 하나씩 하나씩 가져간다고 가정을 하면은 애당초 요 부분에서 지금 경험이 너무 심해가지고 사람이 미어 터지고 있는데 우라통이 터지는 그런 일이 될 겁니다 보통은 아주 큰 쟁반을 , 일단은, 갖고 와 가지고 그 그릇을 이것저것 반찬을 다 담아 가지고 한 번에 큼지막하게 담아 가지고 왔다 갔다 옮기는 게 , 일단은, 더 효율적이라는 생각이 딱 봐도 들게 됩니다 마찬가지로 우리가 지금까지 사용하고 있던 쓰레드에서도 , 일단은, 이 메모리를 보면은 힘 영역이랑 데이터 영역은 다 공용으로 같이 활용한다고 했습니다 반면 스택은 각자 , 이렇게, 따로따로 지금 활용을 하고 있었죠. 분리가 되어 있습니다. 그래서 여기서 만약에 힙 영역이나 데이터 영역 중에 자신들이 공유해서 사용할 데이터가 있다고 하면 그걸 동지 접근을 하려면 락을 잡는다고 하는 식으로 동기화를 해서 한 번에 한 명씩만 접근을 하게끔 우리가 유도를 해줬습니다. 그런데 사실은 이것뿐만 아니라 여기서 제가 잠시 언급을 누락한 TLS라는 애가 , 사실, 하나가 더 있어요. 사실상 이런 그림으로 , 일단은, 봐야 됩니다. TLS 는 Thread Local Storage 뭔가 영어부터 딱 얘가 뭘 하는지를 알겠죠 Thread마다 갖고 있는 로컬 저장소 이다라는 의미라고 볼 수가 있는 거고요 결국에는 TLS 같은 경우에는 Thread마다 각기 , 이렇게, 독립적으로 별도의 공간을 하나씩 갖고 있습니다 , 자, 그래가지고 아까 예로 들면은 , 이렇게, 힙에 있는 어떻게 보면 공에서 사용하는 그런 데이터가 있다고 했을 때 그 데이터를 하나하나씩 만약에 꺼내 쓴다고 하면은 그 데이터를 대상으로 경합이 너무 심해지게 되면은 어떤 스레드들은 일을 못하고 대기를 하는 상황이 발생하겠는데 그게 아니라 그 데이터를 자기가 사용할 거를 충분히 큼지막하게 꺼내가지고 , 일단은, TRS 영역으로 끌고 온 다음에 여기서 이제 자기가 하나씩 하나씩 까먹으면은 처음에 그 큼지막하게 갖고 오는 동안에만 락을 잡아가지고 , 일단은, 옮겨놓은 다음에는 그 다음에서는 TLS 영역이라는 것 자체가 자기가 혼자서만 접근할 수 있는 영역이기 때문에 별도의 경합이 필요가, 경합이 일어나지 않는다는 걸 우리가 알 수가 있습니다. 그러면 또 하나의 질문은 어 그러면은 스택이랑 TLS랑 무엇이 다른 것이냐 뭐 스택도 결국에는 나만 사용하는 데이터 아니냐시긴 한데 어 스택은 뭐 그것도 맞긴 하지만 스택은 일단 함수가 함수를 위한 일단 메모리 공간이라고 생각하는게 좀 일반적이죠 그래가지고 이 스택 메모리 같은 경우에는 함수가 끝나가지고 이제 스택 프레임이 정리가 되면서 이 일부분은 더 이상 유효하지 않게 바뀌고 하는 굉장히 불안정한 그런 메모리이기 때문에 스택에다가 뭔가 영구적으로 사용할 데이터를 저장하는 것은 , 사실, 조금 위험한 생각입니다. 반면 TLS 같은 경우는 사실상 우리가 그런 일반적인 전역 메모리에다가 전역 변수를 사용하는 거랑 마찬가지로 그냥 전역으로 사용할 때 ETS를 그냥 사용할 수 있어요 다만 한 가지 차이점은 전역이긴 하지만 다른 애들은 접근할 수 없는 나만의 전역 메모리 같은 느낌으로 , 일단은, 사용하게 된다고 보시면 되겠습니다 , 자, 그래가지고 이거를 또 어떻게 비유를 할 수 있냐면은 , 자, 여러분들이 동물원에 갔다고 가정을 해봅시다 동물원에서 이제 뭐 사자나 호랑이 같이 고양이과 동물들이 굉장히 많이 모여 있는데 거기서 사육사가 중앙에 막 고기를 먹이를 막 던져준다고 가정을 하면은 처음에는 그 고기 주변으로 막 애들이 모여들다가 거기서 이제 막 옹기종기 , 이렇게, 뭉쳐가지고 먹으면은 굉장히 불편하니까 자기가 먹을만큼 충분한 양을 물어가지고 어딘가 구석으로 가가지고 , 이렇게, 냠냠 혼자 먹는 뭐 그런 모습을 종종 이제 그런 동물 유튜브를 보면은 이제 관찰할 수 있습니다 마찬가지로 큰 영역에 해당하는 그런 부분에다가 매번마다 접근해가지고 락을 획득해가지고 데이터를 꺼내 쓰고 락을 풀고 하는 걸 매번마다 반복할 필요 없이 그냥 큰 덩어리를 , 일단은, 갖고 와가지고 TLS에서 , 일단은, 옮겨 놓은 다음에 여기서 뭐 꺼내먹는 식으로 , 일단은, 우리가 작업할 수 있다는 얘기도 되는 거죠 물론 뿐만 아니라 그냥 일반적인 상황에서 예를 들면은 뭐 이 스레드별로 들어가 있어야 되는 그런 정보들을 , 이렇게, TLS 에다가 애당초 처음에 만들어 가지고 , 일단은, 사용하는 것도 가능하고 이런 식으로 TLS 는 결국에는 Thread마다 존재하는 그런 전역 메모리 같은 느낌이기 때문에 얘가 이제 응용할 수 있는 방법이 이제 굉장히 많습니다 그래서 뭐 나중에 가면은 우리가 샌드 버퍼와 같은 그런 이제 네트워크 통신을 할 때 필요한 그 버퍼 같은 것도 , 이렇게, 경합을 시켜 가지고 갖고 오기보다는 자신만의 틸의 정역에다가 일단 하나씩 할당을 해놔가지고 거기서 꺼내먹는 식으로 , 일단은, 만들어주게 될 거예요 뭐 이건 지금 얘기해도 장장 와닿지 않을 테니까 , 일단은, 미루도록 하고 그래서 , 일단은, 뭐 대충 내용은 TLS는 그냥 이런 내용입니다 뭐 그냥 전역 메모리랑 비슷한데 스레드마다 자신만 , 이렇게, 접근할 수 있는 공간이 하나씩 있다고 , 일단은, 볼 수가 있겠습니다 , 자, 그래가지고 , 일단은, 뭐 다시 코드로 돌아가 가지고 이 TLS에 관한 간단한 실습을 한번 해보도록 할게요 , 자, 요렇게 다시 코드로 돌아왔구요 뭐 , 사실, 오늘 뭐 실습할 거는 굉장히 단순합니다 그냥 TLS를 한번 사용을 해볼 건데 원래 예전에 C++11에는 TLS를 사용하는 방법이 이제 뭐 운영체제 마다 조금씩 달랐어요 그래가지고 예를 들면 이런 식으로 뭐 declare spec 이라고 해가지고 thread라는 키워드를 붙여가지고 뭐 요런 식으로 예를 들면은 우리가 윈도우즈 환경에서는 막 사용을 했었습니다 그런데 이제 C++11이 되면서 표준적인 방법으로 TLS를 우리가 사용할 수 있게 되었기 때문에 뭐 요런 방법은 , 일단은, 잊으셔도 됩니다 그래서 최신 방법은 말 그대로 thread local 이라는 키워드를 , 이렇게, 입력을 해가지고 변수 앞에다가 thread local을 붙이게 되면요 이제 말 그대로 그냥 일반적인 전역 변수가 아니라 thread 자신만 접근할 수 있는 TLS 응용으로 , 일단은, 잡히게 됩니다. 그래서 이런 것도 일반적으로는 좀 구분을 하기 위해서 대문자 L을 붙여준다거나 하는 식으로 좀 구분을 일단 해주면 좀 좋겠죠. 그래서 , 일단은, 큰 L을 붙여가지고 LthreadID라고 일단 이름을 지어놨습니다. 뭐 물론 우리가 Thread를 만들 때 여기 Thread에서 Get 아이디를 이용해가지고 여기서 이제 뭐 자신만의 유니크한 아이디를 부여해서 사용을 해도 되긴 하지만 이 아이디 같은 경우에는 좀 일관성 있게 1, 2, 3, 4, 5, 6, 7 , 이렇게, 늘어나는 게 아니라 숫자가 굉장히 이리저리 뛰고 있었죠 그래가지고 예를 들면은 그게 아니라 우리가 직접 아이디를 부여해가지고 1번부터 10번까지 Thread 아이디를 부여해가지고 그 정보를 Thread가 각자 갖고 있게 만약에 만들어주고 싶다고 가정을 해볼게요 , 자, 그래서 그걸 한번 시습을 해볼건데 그래서 , 일단은, 스레드를 새로 실행을 할건데 각자의 스레드가 , 일단은, 자기가 몇번째 스레드인지를 스레드 아이디를 , 이렇게, 발급을 받아준 다음에 그거를 , 이렇게, 일단은, 자기의 TNS 영역에다가 저장을 해주게 될거에요. 그 다음에 , 자, 이런식으로 무한 루프를 계속 돌면서 그냥 안녕 나는 스레드 몇번 몇번이야 라고 일단 간단하게 로그를 출력을 해보도록 합시다 요런 느낌으로 그럼 이걸 너무 자주 실행하기도 좀 뭐하니까 슬레이트4를 이용해가지고 대충 1초에 한번씩 이 코드를 실행하게끔 유도를 해줍시다 , 자, 그래가지고 이제 뭐 메인에서는 스레드를 여러개를 만들어 줄 것인데요 음 대충 한 10개만 만들어 보도록 합시다 10개를 아이고 10개를 만들어 볼 것이고 여기서 , 일단은, 스레드 아이디를 발급 받을건데 그냥 순차적으로 1번부터 시작하도록 여기다가 1을 더해준 다음에 Thread Vector에다가 Push Back을 해가지고 여기서 직접 Thread를 , 이렇게, 만들어주도록 하겠습니다 Thread Main을 먼저 , 이렇게, 받아줄 것이고 인자로는 Thread ID를 , 이렇게, 넘겨주면 되겠죠 , 자, 이렇게, 했으면 이제 각기의 Thread들이 자신만의 아이디를 부여받아가지고 걔네들이 이제 사용할 수 있는 상황이 된 겁니다 마지막으로 쓰레드가 끝날 때까지 잠시 조인을 해줄게요. 물론 이거는 타기 큰 의미는 없고 메인 암수가 끝나지 않게끔 유도를 해주고 있는 상황이라고 보시면 되겠습니다. t.join 이런 식으로 , 일단은, 사용을 할 수가 있겠죠. 그러면 LthreadID라는 게 만약에 ThreadLocal을 뗐으면 얘가 전역으로 사용하는 메모리이다 보니까 다른 애가 ThreadID를 사용하는 순간 얘가 덮어써서 기존에 있던 값이 날라가겠지만 ThreadLocal로 , 이렇게, 만드는 순간 그런 게 아니라 자신만의 Thread마다 자신만의 공간을 따로따로 갖고 있을 것이기 때문에 이런 식으로 정상적으로 다 아이디가 하나씩 다 따로따로 뜨는 걸 볼 수가 있습니다 뭐 요게 지금 멀티셰드 환경이다 보니까 씨하우스를 , 이렇게, 동시 접근해 가지고 이런 식으로 조금 안 이쁘게 뜨는 건 뭐 둘째 치더라도 어찌됐건 요 아이디 자체는 정상적으로 다 , 이렇게, 따로따로 발급이 되었다는 걸 알 수가 있어요 그래가지고 , 이렇게, 스레드마다 고유하게 들고 있어야 되는 그런 정보들을 뭐 이런 식으로 응용을 할 수도 있고요 아니면 나중에 가면은 뭐 이런식으로 ThreadLocal을 이용해가지고 자신만 갖고 있는 그런 Q를 요렇게 만들어 준 다음에 요 Q에다가 우리가 원하는 데이터를 넣어가지고 그 데이터를 꺼내가지고 얘가 뭐 체류할 수 있게끔 만들어 준다고 하는 식으로 굉장히 이제 얘를 다양하게 이제 응용을 할 수가 있을 겁니다 , 자, 이렇게, 해가지고 , 일단은, 여기까지 ThreadLocal에 대한 내용을 그냥 간단하게 알아봤고 혹시라도 나중에 뭔가 전역 메모리 같은데 ThreadLocal이 붙었다고 하면 아하 얘가 TLS라는 것이구나 라는 걸 이제 알아채워 주시면 좋겠습니다 그리고 앞으로는 이제 TNS를 사용할 경우에는 얘가 local, said local 영역이다라고 해가지고 , 이렇게, 대문자 L을 붙여주는 걸 일단 기본적으로 저는 활용할 거예요. 참고로 뭐 이거는 아직 안 했지만 만약에 그게 아니라 그냥 일반적인 글로벌 변수라고 하면은 , 이렇게, 대문자 G를 붙여가지고 뭐 이런 느낌으로 대문자 G를 붙여가지고 , 일단은, 활용할 예정입니다. 이게 뭐 예전 프로젝트에서 사용하던 네이밍 컨벤션 이어가지고 익숙해서 이걸 나중에 활용하게 될 거예요. , 자, 이렇게, 해가지고 뭐 , 이렇게, 어려운 내용은 아니었죠 그냥 말 그대로 어 스레드마다 갖고 있는 영역이다라는 걸 , 일단은, 간단하게 실습을 해보고 일단 다음으로 넘어가도록 할게요 이제 다음부터 음 다음 시간부터 조금 재밌는 걸 해볼 건데 우리가 , 사실, 멀티스레드에서 필요한 그런 사전 지식들은 거의 한 바퀴 돌았다고 볼 수가 있습니다 뭐 믿기지 않겠죠 아직 뭐 딱히 뭐 많이 배운 것 같지는 않지만 , 사실, 지금까지 배운 내용을 열심히 조립을 하면은 굉장히 많은 것들을 할 수가 있는데 , 일단은, 뭐 스택이랑 큐 같은 그런 자료 구조들을 우리가 멀티스레드 환경에서 돌아가게끔 만드는 그런 걸 몇 개를 만들어 보면서 멀티스레드 프로그래밍에 더 익숙해지는 그런 실습 시간을 가져보고자 합니다. , 자, 이렇게, 해서 , 일단은, TLS에 관한 내용은 이쯤에서 마치도록 할게요.