자, 이제 이번 시간부터 멀티스레드에 대해서 본격적으로 알아보도록 할 건데요 , 사실, 서버 프로그래머 입장에서는 멀티스레드는 거의 필수적으로 잘 숙지해야 되는 그런 부분이기도 하지만 또 한편으로는 멀티스레드 프로그래밍을 시작하는 순간 이전에 발생하지 않았던 굉장히 어려운 문제들이 또 발생하는 양날의 검을 가진 물건이긴 합니다 , 자, 그런데 멀티쓰레드 개념이 처음에는 조금 까다롭고 어려울 수 있기 때문에 이걸 이제 비유해서 설명을 드려볼 건데요 사실은 제 이전 강의를 들어보셨으면 어느정도 아시겠지만 제가 늘상 비유를 하는게 있습니다 이게 뭐냐면 이제 클라이언트 프로그래밍은 영화를 촬영하는 거랑 또 굉장히 유사하다는 비유를 많이 하고요. 서버 프로그래밍 자체는 식당 경영을 하는 것과 굉장히 유사하다고 제가 표현을 많이 합니다. 그래서 오늘 1차적으로 일단 식당을 운영하는 그런 상황을 예제로 들어봤고요. 말 그대로 직원을 고용을 해서 식당을 운영하는 상황을 지금 예로 들고 있는 겁니다. , 자, 그래서 , 일단은, 옛날 옛날에 , 이렇게, 한식집, 일식집 그리고 뭐 패밀리 레스토랑과 같은 일련의 식당들을 우리가 새로 창업을 했다고 가정을 해볼게요 뭐 당연히 얘기지만 한식집이냐 일식집이냐 또 어떤 걸 하느냐에 따라가지고 식당 인테리어가 당연히 다르게 되겠죠 회전 초밥집이면 당연히 그거에 맞게끔 좌석을 설치를 해야 될 것이고 패밀리 레스토랑은 일반적으로 조금 더 규모가 큰 경우가 많으니까 더 큰 그런 공간을 임대해야 될 겁니다 뭐 그건 그렇고 , 이렇게, 뭐 자리를 다 배치를 한 다음에 그 다음에 우리가 이제 해야 되는 거는 직원을 뽑아 가지고 그 직원이 이제 우리 식당을 잘 운영할 수 있도록 뭔가 유도를 해야 되겠죠 그래서 지금 딱 , 이렇게, 한식집과 일식집에서는 각각 한 명의 직원을 그리고 패밀리 레스토랑에서는 2명의 직원을 고용한 상황이라고 볼 수가 있겠습니다 , 자, 그런데 일반적인 그런 현실 케이스와는 조금 다른 게 뭐냐면은 요 직원들이 그냥 고지곳대로 계속 움직이질 않습니다 반드시 영혼을 주입해가지고 그 영혼이 주입된 직원만 움직일 수 있는 그런 굉장히 묘한 상황이라고 가정을 해볼게요 소위 우리가 드라마를 보면은 어떤 귀신이 사람 몸에 들어가가지고 그 사람 몸을 움직이고 뭐 요런 케이스가 종종 등장하는데 비현실적이긴 하지만 지금은 약간 그런 상황이라고 일단 가정을 해보도록 하겠습니다 그래서 지금 이 직원들이 노란색인 상황에서는 움직일 수 없고 그냥 가만히 있는 상태이고요 , 이렇게, 영혼을 주입해가지고 예를 들면은 한식집 직원에 딱 얘가 빙의를 하는 순간 이제 한식집 직원은 일반적인 직원처럼 막 움직이면서 서빙도 하고 뭐 주방도 보고 할 수 있는 상황이 된 겁니다 근데 이러면은 이제 다른 식당이 또 돌아가지 않겠죠 그러다 보니까 이제는 거꾸로 일식집을 또 굴리기 위해서 , 이렇게, 옆으로 빙의를 해가지고 다시 일식집 직원을 움직이게 될 겁니다 이 직거리를 굉장히 짧은 시간 내에 왔다 갔다 왔다 갔다를 계속 반복해서 하게 되면 사실상 , 이렇게, 하나의 영혼이 4개의 지금 직원을 동시에 움직이는 것 같은 착각을 들 수 있게끔 동시에 이제 직원들을 움직일 수 있게 되겠죠. 물론 정확히 말하면은 어떤 특정 시간대에 두 모형의 직원이 동시에 움직일 수는 없겠지만 이걸 정말 빠르게 빠르게 빠르게 빠르게 이동하다 보면은 , 이렇게, 스르륵 얼핏 보면은 4명의 직원이 동시에 움직이는 것 같은 착각이 들 겁니다. 뭐 요런 상황이라고 , 일단은, 가정할 수가 있겠어요. 뭐 그래가지고 , 일단은, 뭐 식당이 잘 굴러가고 있습니다 영혼은 하나에 불과하지만 짧은 시간 내에 왔다 갔다 이동을 잘 해서 움직이고 있었습니다가 , 일단은, 오늘의 결론이 되겠습니다 , 자, 근데 이 상황을 이제 다시 서버 프로그램 제 일반적인 컴퓨터에 비교해서 다시 한번 살펴보도록 할게요 이제 여기서 우리가 얘기하는 그 고급 레스토랑은 결국 하나의 프로세스 즉 실행 중인 프로그램을 얘기하는 거고 직원은 thread 그리고 영어는 , 사실, 우리 cpu 코어에 해당한다고 보시면 되겠습니다 그래가지고 아까와 마찬가지로 우리가 어떤 운영체제를 켠 다음에 프로그램을 동시에 여러개를 실행할 수 있죠 그림판도 켜고 메모장도 켜고 그리고 우리 mmo 서버도 돌릴 수 있을 텐데 이게 , 사실, 식당을 여러 개를 운영하는 것과 마찬가지로 하나의 공간에 , 이렇게, 지금 여러 개의 프로그램들이 켜져 있을 수가 있습니다 하지만 프로그램이 , 이렇게, 메모리에 올라왔다고 해가지고 걔네들이 사실상 뭔가 동작을 하는 건 아니고 실질적으로 코드가 실행이 되려면은 , 자, 요런 식으로 주체가 있어야 됩니다 즉, 쓰레드가 일단 배치가 되어 가지고 그 쓰레드가 실질적으로 그림판, 메모장 혹은 우리 MMORPG 서버의 로직을 실행해야 된다는 얘기가 되는 거죠 그래서 thread란 무엇인지 구글이나 위키 같은 데 검색을 해보면 영문으로 검색을 해보면 animated spirit 이란 용어를 굉장히 많이 사용합니다 실질적으로 그 프로그램을 움직이는 영혼과 비유를 하는 거죠 그래서 결국에는 얘네들이 영혼과 같이 실질적으로 우리 프로그램을 움직여 주고 실행하는 그런 역할을 맡게 될 것인데 얘네들도 그냥 곧이곧대로 자기 스스로 뭔가 메모리에 올라갔다고 해가지고 뭐 실행이 되는 애들은 아닙니다. 그러면 이 프로그램을 실행하는 주체는 누구이냐? 이거는 , 사실, 컴퓨터 부품 분해를 해보셨으면 잘 아시겠지만 이 역할은 CPU가 맡게 됩니다. 그래서 아까 식당 예제에서 직원한테 빙의하는 그 영혼의 역할이 결국에는 컴퓨터를 치면 CPU의 코어가 되는 거죠. CPU가 요즘 기준으로는 멀티코어가 거의 기본인 상태이기 때문에 코어가 굉장히 여러개가 있겠지만 단순하게 설명을 하기 위해서 일단 아주 옛날 옛적으로 돌아가서 CPU 하나에 코어가 하나밖에 없었던 시절로 돌아가서 가정을 해보도록 할게요 여기서 CPU 코어라고 하는 것은 결국 우리 인간으로 치면 두뇌에 해당하는 부분이구요 안에 보면 이제 ALU 라고 해가지고 뭐 더샘이나 뺄생과 같은 그런 실질적인 연산을 하는 그런 회로들이 다 마련되어 있습니다 그래가지고 얘가 지금 요 상황에서 그림판에 얘가 딱 빙의를 해가지고 그 그림판을 실행을 시키게 되면은 이제 그림판 프로그램이 실행이 되는 거구요 메모장 프로그램을 실행시키면 또 메모장이 실행되고 , 이렇게, 아주 짧은 시간만큼 하나의 프로그램을 실행했다가 다른 프로그램 넘어갔다가 또 다른 프로그램으로 넘어갔다가 이거를 왔다 갔다 계속 반복적으로 해주게 됩니다 그래서 우리 눈에는 요렇게 메모장과 그림판과 MMO 서버가 동시에 실행되는 것처럼 보이게 되겠지만 사실은 정말 정말 정밀 분석해서 살펴보면 실질적으로 단일 코어 하나가 실행할 수 있는 프로그램은 딱 하나밖에 없다는 얘기가 되는 거죠 그리고 하나의 프로그램 내에서도 지금 우리 MMO 서버 같은 경우에는 Thread를 두 개를 배치했다는 걸 알 수가 있습니다 뭐 이거 왜 이제 다른 애들은 한 개밖에 없는데 얘는 두 개를 배치했느냐 뭐 이거는 뭐 상황에 따라 조금 다르긴 하지만 그림판은 굉장히 단순한 프로그램이기 때문에 Thread를 여러 개 배치해 가지고 이를 병렬로 처리할 필요가 없습니다 반면 우리 MMO 서버 같은 경우에는 딱 봐도 유익감이 굉장히 많겠죠 몇천 명의 유저들이 동시에 접속을 해가지고 패킷을 막 보내고 게임 로직도 실행하고 데이터비트 저장도 하고 정말 할 일이 많은데 그거를 이제 단일 스레드가 하게 되면 너무 벅차기 때문에 , 이렇게, 스레드를 여러 개를 배치했다고 보시면 되겠습니다 하지만 뭐 스레드를 여러 개를 배치했다고 해서 항상 성능이 좋아지는 건 아니고 지금 우리가 예를 들고 있는 요 상황처럼 실질적으로 코어가 하나밖에 없으면 , 사실, 이렇게, 어 직원을 여러 명을 배치한 즉 멀티스레드 환경을 한 것 자체가 , 사실, 큰 의미가 없긴 합니다 그리고 같은 직원이라고 하더라도 중요도가 조금 다를 수도 있겠죠 예를 들면 그림판은 솔직히 우리 입장에서 보면 하찮은 프로그램이고 MMORPG 서버 쪽이 훨씬 더 중요하다고 가정을 하면 이런 식으로 우선순위를 도와주고 특정 스레드가 더 많은 실행시간을 받게끔 이제 유도를 할 수가 있습니다 이건 이제 기본적으로 운영체제의 론에서 다루는 주제이긴 한데 공평하게 시간을 배분할 것이냐 아니면 뭐 특정한테 몰빵을 할 것이냐 등등 굉장히 여러가지 케이스가 있다고 보시면 되겠어요 , 자, 그래가지고 결국에는 요렇게 왔다갔다 하면서 실행을 하는게 어 결국 프로그램이 동작하는 원리이다 그리고 이게 , 사실, 운영체제랑 컴퓨터 구조원리 그리고 굉장히 많은 것들이랑 연관성이 있다는 걸 알 수가 있어요 그 다음에 이제 알아보고 싶은 거는 그래서 여기서 제가 계속 말씀을 드리는 바와 같이 설령 직원이 여러 명을 배치했다고 하더라도 실제적으로 걔네들이 동시에 움직일 수 없고 코어가 하나밖에 없으면은 , 사실, 이렇게, 배치한 보람이 없죠 실질적으로 우리가 현실적인 컴퓨터를 생각을 해보면 멀티코어라는 용어를 활용합니다 즉 CPU 안에 코어가 여러 개가 , 이렇게, 배치된 상황이 있다고 보시면 되겠어요 그래가지고 실질적으로 지금 요런 상황 즉 코어가 여러개가 있어가지고 하나의 코어가 하나의 스레드를 전담 마크해가지고 얘네들이 진짜로 동시에 실행이 되면은 , 사실, 프로그램이 굉장히 아름답게 지금 동작을 하는 상황이라고 보면 되겠어요 근데 물론 요 상황은 또 굉장히 아름답지만 역시나 스레드가 또 개수가 늘어나면 아까와 마찬가지로 코어가 이 스레드 저스레드 타고 타고 가면서 왔다 갔다 하면서 실행하는 것은 변함이 없다고 보시면 되겠습니다 실질적으로 여러분 프로그램 여러분 운영체제에서 Ctrl, Alt, Delete를 눌러가지고 작업관리자를 보면은 진짜 실행중인 프로그램이 굉장히 굉장히 많다는 걸 알 수가 있습니다 게다가 심지어 요런 애들 뿐만 아니라 실질적으로 운영체제가 실행이 되는 즉 커널 모드라고 하는 그 부분도 결국에는 CPU가 실행해야 되는 거는 변함없기 때문에 , 사실, 우리가 , 이렇게, 그림판, 메모장, MMO 서버 3개만 띄웠다고 해서 진짜로 프로그램이 그것만 실행이 되는 건 또 아닙니다 즉 운영체제는 생각 이상으로 복잡하다는 얘기가 되는 거죠 어찌됐건 결국에는 우리가 최종적으로 바라는 이상적인 상황은 딱 요런 상황입니다 MMO 서버 외의 기타, 잡 프로그램들은 다 꺼져 있는 상태고 최대한 진짜 필요한 애들만 켜놓은 상태에서 그리고 실들적으로 스레드 개수는 프로세서가 실행할 수 있는 즉 CPU 코어 개수만큼 1대 1로 대응 되게끔 만들어서 CPU 코어가 왔다 갔다 할 필요 없이 하나의 직원을 하나의 스레드를 전담 마크해서 실행하는 게 가장 이상적인 상황이다라는 것은 이제 꼭 기억을 하셔야 되겠어요 , 자, 그 다음에 결국에는 우리가 아까와 같이 이상적인 상황에서 Thread를 여러 개를 고용하는 이유는 일감을 분배해 가지고 동시에 실행 되게끔 이루어 하기 위함입니다 서버를 예로 들면은 게임 로직도 실행해야 될 것이고 클라이언트 쪽에서 보내는 패킷도 처리를 해야 될 것이고 데이터베이스 저장도 해야 될 것이고 굉장히 일이 많은데 그거를 각각 분배해가지고 누구는 게임 로직을 담당하고 누구는 DB를 담당하고 하는 식으로 일감을 분배해가지고 동시에 다발적으로 실행하는게 , 사실, 우리의 최종적인 목표라고 보면 되겠습니다. 그리고 , 이렇게, 스레드가 여러개가 등장한 환경은 , 자, 이제 여기서 조금 헷갈리는 부분이 그러면은 우리가 메모장을 여러개를 켤 수가 있겠죠 마찬가지로 프로그램을 동일한 프로그램을 여러개를 키는 거랑 하나의 프로그램 내 스레드를 여러개를 배치하는 거랑 어떤 차이가 있는지 , 사실, 처음 배울 때는 굉장히 헷갈릴 텐데요 멀티스레드 환경에서는 굉장히 큰 장점이 있는데 , 자, 지금 보는 바와 같이 힙 영역과 데이터 영역을 모든 스레드들이 다 공유할 수 있다는 큰 장점이 있습니다 그러니까 데이터를 두 번 관리할 필요 없이 동일한 데이터를 여러 명이 동시에 참조를 할 수 있다는 얘기가 되는 거죠 물론 이게 일반적인 상황에서는 장점이 되겠지만 이것 때문에 또 발생하는 여러 가지 문제가 있게 됩니다 예를 들면 하나의 스레드에서는 어떤 데이터를 건드리고 있고 또 다른 스레드에서는 그거를 읽으려고 하는 동시다발적으로 같은 데이터를 접근하는 등등의 문제를 우리가 해결하지 않으면 이 장점을 활용할 수가 없다는 얘기가 되는 거죠 그래서 , 사실, 멀티 스레드라 하면 이 스레드를 잘 배치해 가지고 걔네들이 병렬로 잘 동작하게끔 하는 것도 있지만 , 이렇게, 공유된 데이터를 어떻게 관리해 가지고 동시에 접근할 것인가에 관한 문제도 이제 등장하게 될 겁니다 그래서 최종적으로 우리 식당을 잘 운영해야 되는데 이게 처음에 우리가 생각했던 것과 굉장히 다르게 동작할 확률이 높습니다 이론적으로는 하나씩 스레드를 잘 배치하게 되면은 걔네들이 다 병렬로 잘 진행할 것 같지만 조금씩 로직이 한쪽에 쏠리고 모이고 하다보면은 우측에 있는 그림과 같이 정말로 난장판이 될 확률로 높아진다는 것도 이제 꼭 아셔야 되겠습니다 물론 이건 이제 쓰레드와 관련된 멀티스레드 개론 시간이다 보니까 해당 내용을 굉장히 간단하게 요약을 한 건데 이제 앞으로 쓰레드를 생성을 해보고 그 다음에 온갖 동기와 기법들에 대해서 알아보다 보면은 이런 부분들에 대해서 이제 훨씬 더 깊게 이해를 하시게 될 겁니다.