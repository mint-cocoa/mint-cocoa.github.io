자, 이렇게, 해서 이번 시간부터 드디어 네트워크 파트로 넘어오도록 하겠습니다 그래서 이제 뭐 메모리 관리도 어느 정도 끝났고 이제 진짜로 소켓 프로그램을 통해 가지고 네트워크 통신을 하고 데이터도 주고 받고 하는 작업을 이제 시작을 할 건데 통상적으로 이제 네트워크 프로그래밍을 할 때 기본적으로 네트워크 이론에 대해서 쭉 공부를 한 다음에 그 다음에 , 사실, 소켓 프로그래밍을 공부하는 게 뭐 정석적인 순서이기는 해요 근데 이번 강의에서는 조금 순서를 바꿔서 , 일단은, 그냥 헤딩을 하면서 소켓 프로그래밍을 신나게 해본 다음에 어느 정도 윤곽선이 잡히면 그제서야 네트워크 이론에 대해서 거꾸로 살펴보도록 하겠습니다. 뭐냐면 지금 당장 네트워크 이론을 알아보면 솔직히 좀 필요성을 못 느끼는데도 불구하고 내용이 좀 많기 때문에 굉장히 지루하게 느껴질 수가 있어요 하지만 언젠가 여러분들이 서버 프로그래밍을 진지하게 하고 서버를 라이브 상태로 배포를 하고 또 운영을 하다 보면은 그런 네트워크 지식이 언젠가는 필요할 날이 오니까 그런 부분들이 중요하지 않다는 얘기는 아닙니다 뭐 어쨌든 그래서 오늘부터 이제 뭐 소개 프로그래밍을 한번 해보겠다라고 설명을 드리고 있는 거고요 그 다음에 한 가지만 더 당부를 드리자면 뭐 , 사실, 이전 강의였던 dx12도 마찬가지지만 어 요렇게 그냥 간단한 프로그래밍을 하다가 뭐 그래픽스 라거나 아니면 네트워크 프로그래밍을 시작하는 분들이 처음에 굉장히 당황하는 이유는 이제부터 굉장히 함수들이 많이 등장을 합니다. 주구난방으로 새로운 함수들이 막 등장을 해서 정신을 못차리시는 분들이 굉장히 많은 것 같더라구요 그래서 제가 이전에 만들었던 C샵 시리즈에서도 이 함수들이 너무 많은데 뭐 어떻게 해야 되느냐 , 이렇게, 공부하는 게 맞느냐 라는 질문을 종종 받았어요 근데 결론부터 말씀을 드리자면 처음에 할 때는 좀 정신이 없는 게 당연한 겁니다 그리고 너무 세부적으로 함수 하나하나에 대한 정밀 분석을 할 필요는 당연히 없고요 그냥 이 네트워크 흐름이 어떻게 이루어지는지 그냥 전체적인 흐름을 분석하는 데 , 일단은, 주력을 해야 합니다 그리고 사실은 이런 코드는 초기화라고 하긴 뭐하고 이 네트워크 코드들은 초반에 한두 번 만든 다음에 거의 몇십 년 동안 그냥 거의 안 고치고 쓸 정도로 어쩌다가 한 번씩 작업하는 것이기 때문에 이런 코드를 당연히 외울 필요도 전혀 없습니다 그건 , 일단은, 항상 염두에 두시고 너무 함수가 많이 등장한다고 스트레스를 받을 필요가 없다는 이해가 되는 거죠 , 자, 그리고 그건 그렇고 오늘 이제 준비한 것은 결국에는 이제 네트워크 즉 소켓 프로그래밍을 시작하기에 앞서서 이게 생각보다 처음에 할 때는 좀 정신이 없기 때문에 이 흐름 자체를 어 약간 비유를 해가지고 일단 설명을 드리고자 합니다 그래가지고 , 자, 이제 다시 식당 스토리로 제가 돌아와보도록 할게요 뭐 , 사실, 서버가 식당이랑 굉장히 유사하다고 했었죠 이번 식당에서 우리가 하고 싶은 거는 뭐냐면 이제는 뭔가 문의 전화를 받아가지고 고객님들에 대한 그런 문의 전화를 받아서 질문에 대답을 해주기 위한 시스템을 우리가 구축을 하고 싶어요 여러분들이 어떤 제품을 산 다음에 문의사항이 생긴다거나 아니면 다른 요청사항이 생기면은 그 회사에게 전화를 하고 그러면은 그 회사 대표 번호로 , 일단은, 전화를 걸어 가지고 거기서 우리의 요청 사항에 따라가지고 혹은 요청 분류에 따라가지고 다른 데로 전화를 연결시켜주고 뭐 이런 식으로 AS 센터에 전화를 하는 경험이 있는데 약간 그런 느낌이라고 일단 생각을 해보도록 합시다 그러면 이제 우리가 , 일단은, 고객 입장에서 생각을 해볼 거고 식당 입장에서 한번 생각을 해볼 건데 , 일단은, 먼저 식당 입장이라고 생각을 해보고 우리가 이 시스템을 구축한다고 생각을 해볼게요 그러면은 가장 먼저 해야 될 거는 , 일단은, 직원을 고용을 해서 소위 안내원을 고용을 하도록 하겠습니다. 이 안내원의 역할은 말 그대로 회사 대표 전화로 전화가 오면은 그거를 전화를 받아가지고 다른 직원한테 이제 토스를 하는 역할을 맡게 되는 거예요. 예를 들면 우리가 대기업에 전화를 할 때 일단 비서한테 전화를 하면은 그 비서분이 용건에 따라가지고 사장님 번호로 , 이렇게, 토스를 해줘가지고 연결을 시켜주고 이런 식으로 동작한다고 , 일단은, 생각을 해봅시다. 그러면 , 일단은, 고용을 한 것까지는 좋은데 이 직원이 자기 개인 핸드폰으로 전화를 받을 건 당연히 아니겠죠? 그러다 보니까 이제 회사 대표 전화를 하나를 배정을 받아 가지고 예를 들면 우리 지금 흑식당이 서초점 중화요리 모시기라고 한다면 거기에 맞는 전화번호를 , 일단은, 배정을 받아 가지고 우리가 폰에다가 그 전화번호를 일단 연결을 시켜줘야 되겠죠 그래서 이제 나중에 네이버에 어떤 식당을 찾아보면 그 대표 번호가 나오는 것처럼 이제 우리가 어떤 번호를 공식적인 번호를 이제 할당을 받아 가지고 사용을 하게 될 겁니다 그 다음에 이제 식당을 영업을 시작을 하게 되면은 이제부터는 고객이 우리가 아까 공개한 그 번호를 이용해 가지고 우리한테 전화를 걸 수가 있을 거예요 전화를 걸게 되면은 아까 우리가 배치한 그 대표 안내 직원이 전화를 받을 테죠 그래가지고 이제 누군가가 딱 영업 후에 문의사항이 생겨 가지고 전화를 했다고 하면은 지금 이 직원이 상시 근무 중이고 상시 대기 상태이다 보니까 바로 전화를 받을 수가 있을 겁니다 그럼 이제 그 용건에 따라 가지고 요런 식으로 제가 여기서 대리인 이라고 표현을 했는데 어... 용건에 따라가지고 이제 다른 직원한테 이제 그거 토스를 하는거죠 그래가지고 앞으로 그 전화를 건 고객이랑 통신할 필요가 생기면은 이제 안내원이 해주는게 아니라 요런식으로 별도의 수화기를 하나를 더 배치해가지고 이제 요 직원이 요 아이랑 통화를 하게 될겁니다 어 이제 지금 우리 안내원 입장에서 보면은 요 사람이 지금 , 이렇게, 전화를 걸었지만 전화를 건 순간에 애덩초 요 사람의 전화번호도 같이 이제 핸드폰에 찍히게 될 테니까 그거를 토스 해가지고 넘겨줬다고 일단 생각할 수가 있겠습니다 그럼 이제 앞으로는 안내원은 더 이상 신경 쓸 필요 없고 , 이렇게, 둘 사이에서 통신이 이뤄지는 것처럼 이제 진행이 된다고 볼 수 있는 거죠 그래서 만약에 이제 이렇게까지 진행이 됐으면 이제 앞으로 요 고객이 우리한테 계속 뭐 할 말이 있으면 그냥 요 대리인을 통해 가지고 계속 얘기를 하면 될 것이고 우리가 고객한테 또 할 말이 있다고 하면은 요 전화번호를 통해 가지고 요 전화기를 통해 가지고 이제 이 직원을 통해 가지고 , 이렇게, 연락을 주고 받을 수가 있을 거예요 그래가지고 어떻게 보면 이제 식당 문의 서비스가 요렇게 완성이 되었다고 볼 수가 있겠습니다 , 자, 그러면 이 똑같은 스토리를 이제는 손님 관점에서 한번 생각을 해보도록 할게요 근데 당연한 얘기지만 손님 관점은 식당을 운영하는 관점에 비해서 훨씬 더 단순합니다 우리가 뭐 어떤 회사나 식당에 전화를 예약한다거나 하는 뭐 등댕이 유혁이 생겨가지고 전화를 할 때를 곰곰이 생각을 해보면 그냥 딱 두 가지가 필요하죠 먼저 나도 , 일단은, 핸드폰 있어야지 전화를 할 수 있을 테니까 뭐 수화기를 하나를 마련을 , 이렇게, 해줄 거고요 그 다음에 내가 지금 전화하고 싶은 상대방의 전화번호를 찾아가지고 그 번호로 전화를 걸면 되죠 그냥 굉장히 단순합니다 전화를 찾아가지고 전화를 건다 , 이렇게, 두 가지로만 일단 이루어져 있어요 전화가 이어져가지고 안내하는 대표번호를 받아주는 직원이 전화를 받게되면 또 이런식으로 다른 직원한테 용도에 따라 가지고 토스를 해 줘 가지고 이제 우리는 앞으로 요 직원이랑 , 이렇게, 연락을 하게 된다라는 그런 결론을 내릴 수가 있는 거죠 , 자, 굉장히 좀 현실과 약간 다를 수도 있기는 한데 왜 뜬금없이 요런 뭐 식당에 비유하거나 아니면은 이 문의 전화에 비유를 하냐면은 , 사실, 요 흐름을 이해하는 게 굉장히 중요합니다 그래가지고 , 일단은, 고객 입장과 식당 입장을 구분을 해가지고 얘가 지금 어떻게 이루어져 있는지를 다시 한번 요약을 해보면 고객은 핸드폰을 준비하고 식당 번호로 전화를 건다 , 이렇게, 두 가지 준비 단계를 거쳐가지고 전화를 받았으면 이제 소위 대리인을 통해 가지고 식당 측이랑 대화를 하게 할 수 있게 되었다라는 결론을 얻을 수가 있는 거고 식당 입장에서는 조금 더 단계가 복잡했죠 먼저 안내원을 고용을 한 다음에 그 안내원에다가 이제 대표 핸드폰을 하나를 주고 대표 번호를 배정 받아 가지고 그 핸드폰에 맵핑을 해준 다음에 그 다음에 영업을 시작하게 될 것이고 영업을 시작한 다음에 그제서야 누군가가 전화를 , 이렇게, 뿅 걸어주면은 그 해당 고객의 니즈에 따라가지고 안내를 해주고 안내를 해주게 되면은 이제 내부적으로 그 고객이랑 통화할 수 있는 번호를 개통해가지고 뚫어가지고 둘 사이에 통신을 할 수 있다 약간 이런 느낌으로 진행이 된다고 볼 수 있는 거예요 그래서 이 순서와 흐름도를 잘 기억을 하시고 이게 이제 우리가 소켓 프로그래밍에서 이어서 진행할 흐름이랑 굉장히 유사하게 되어 있습니다 그래가지고 이제 이거를 1대1로 , 이렇게, 대응을 해보면 결국에는 우리가 뭐 네트워크 통신을 한다는 것도 클라이언트가 있고 서버가 있을 거예요 그래서 여기서 클라 서버는 말 그대로 전화를 거는 쪽이 그냥 클라이언트라고 하는 거고 전화를 받기 위해서 대기를 하고 운영하고 있는 그 사업주가 이제 서버라고 우리가 부르게 될 겁니다 식당과 고객의 관계가 서버와 클라이 관계라고 볼 수 있는 거죠 그래서 아까 얘기한 대로 클라이언트 입장에서는 굉장히 단순해요 그냥 소켓을 하나를 만들어서 준비를 한 다음에 이 소켓이라는 게 핸드폰이랑 굉장히 비슷합니다 그냥 단말기라고 생각하시면 돼요 네트워크 통신을 하기 위한 도구를 하나를 준비해야 되는데 그거는 당연한 얘기지만 우리가 네트워크 통신을 하기 위해서 운영체제한테 부탁을 해주게 됩니다 소켓 모시기라는 여러가지 함수들 중 하나를 이용해가지고 이 소켓이라는 걸 만들어 준 다음에 이 단말기를 이용해가지고 연락을 하게 되는데 서버 주소로 커넥트를 하게 됩니다 그 식당 번호로 우리가 전화를 건 거랑 똑같은 거죠 이제 전화기가 준비되었으면 전화를 건다 라는 두 단계로 일단 이루어져 있는 거고 그래서 소켓을 준비하고 우리가 접근하고 싶은 서버 주소로 커넥트를 한다 , 이렇게, 두 단계를 거치게 되면 , 일단은, 연결이 맺어진다고 일단 생각할 수가 있겠습니다 물론 상대방 주소가 잘못되었거나 아니면 상대방이 준비가 되어 가지 않아 가지고 아직 영업 중이지 않다고 하면은 당연히 실패가 뜨겠지만 그게 아니라 상대방이 이미 준비를 하고 있는 즉 서버가 떠 있는 상태라고 하면은 여기서 통신이 맺어지고 그 다음에는 요 소켓을 통해 가지고 서버와 패킷을 송수신하고 이런 식으로 진행을 할 수 있다라는 얘기가 되는 거죠 그래서 클라이언트는 , 사실, 굉장히 단순합니다 그리고 요 클라이언트는 나중에 가면 우리가 실행하고 있는 우리의 유니티나 얼리어렌즈로 만든 그 클라이언트를 얘기를 하고 있는 거죠 거기서 이런 식으로 서버에 붙어가지고 연락을 해주게 될 겁니다 통신을 해주게 될 거고 , 자, 반대로 우리가 이제 서버 입장에서 또 생각을 해보면 서버라는 것은 결국 식당과 굉장히 유사하고 있었죠 요 4단계를 일단 똑같이 거쳐가지고 진행을 해야 되는데 얘도 마찬가지로 어쨌든 통신이 필요하니까 요 위에 있는 아이와 마찬가지로 소켓을 하나를 준비해야 됩니다 단말기 같은 요 전화기를 준비해야 된다는 얘기가 되는 건데 이 소켓을 준비하는 이유는 그 안내원이 받을 그 대표 전화를 만들어 줘야 돼요 아까 요 케이스에서 요 아이를 말하는 거죠 이 대표 전화를 하나를 만들어 줘야 되는데 그걸 제가 여기서 리스너 소켓이라고 일단 표현을 한 겁니다 요 용어는 뭐 딱히 공식 용어 아니니까 참고하시고 어쨌든 소켓을 서버 쪽에서 하나를 준비해 준 다음에 그 다음에 bind라는 함수를 실행해 가지고 주소를 연동을 시켜 줄 겁니다 우리가 이제 서버 주소나 아니면 포트를 이제 소켓에 연동을 하는데 그게 말 그대로 아까 우리가 예로 들었을 때 그 회사의 대표 번호를 배정하는 것과 굉장히 유사하다고 생각하시면 돼요 그래서 이제 전화번호를 개통하는 느낌으로 우리 서버 주소는 몇 번 몇 번이고 몇 번 몇 번 포트에 이제 개업을 하겠다 그쪽으로 연락을 받겠다라고 우리가 , 이렇게, 선포를 하고 있는 겁니다 , 자, 여기 뭐 주소나 포트와 관련된 내용은 나중에 또 다룰테니까 뭐 지금 이해가 안가시면 그냥 대충 뭐 일종의 그냥 대표 번호다라고 생각하시면 되는거고 그 다음에 여기까지 , 일단은, 다 세팅이 완료되었으면 이제 진짜로 영업을 시작을 하게 돼요 영업을 시작하게 되면은 이쪽에선 리슨이라는 함수를 실행하게 될 건데 리슨이라는 함수를 실행해주게 되는 순간 이제는 외부에서 연락을 할 수 있게 됩니다 즉 여기 3번까지 , 일단은, 진행이 되었으면 그 다음에 누군가가 클라이언트가 이런 식으로 커넥트 함수를 때리면은 이 마지막 단계인 accept를 어... 그니까 역세트가 리턴이 되면서 이제 안내를 해줄 수 있게 됩니다. 그니까 , 사실, 얘네들이 두개가 별도로 , 이렇게, 따로따로 분리돼서 실행되긴 하지만 요 단계까지 거쳐가지고 , 일단은, 리슨이 돼야지만 그 다음 단계로 넘어갈 수 있다는 얘기가 되는 거죠. 순차적으로 예를 해줘야 됩니다. , 자, 그래가지고 이제 영업을 시작을 한 다음에 전화가 오면은 고객을 안내를 해주면 될 테니까 마찬가지로 얘도 bind listen 다음에 accept라는 함수를 딱 호출해줄텐데 accept라는 함수를 호출이 되면은 이제 누군가가 식당 번호로 , 이렇게, 전화를 걸었을 때 우리가 걔를 안내를 해줄 수가 있게 돼요 그래가지고 우리가 안내를 해줄 때 어떤 식으로 했었냐면은 전화가 왔다고 하면은 여기서 전화가 오면은 요런 식으로 별도의 소켓을 하나를 더 만들어 준 다음에 요렇게 이 둘끼리 통신을 할 수 있게끔 유도를 해줬었죠 마찬가지로 accept라는 함수가 끝나게 되면 자동적으로 이런 단말기가 하나가 만들어지는데 이 단말기를 통해 가지고 상대방쪽 클라랑 연결을 해가지고 전화를 할 수가 있게 됩니다 자동적으로 즉 얘를 이용해 가지고 메시지를 보내면은 바로 처음에 전화를 건 고객이랑 통신을 할 수 있다는 얘기가 되는 거죠 그래서 결국에는 이런 흐름으로 우리가 코드를 작업을 하게 될 건데 이제 이어서 코드 작업을 해볼 건데 이게 생각보다 좀 복잡하다 하면은 이 그림을 스샷을 찍어 가지고 그냥 계속 살펴보시면 돼요. 준비, 커넥트. 서버 쪽에서는 Socket 준비, Bind, Listen, Accept 그 다음에 이제 여기까지 끝났으면 연결이 딱 된 상태에서는 이제 나중에 Receive나 Send 같은 함수를 이용해서 통신할 수 있다고 일단 볼 수가 있는 거죠 그래서 이어서 코드에서 딱 요 부분까지 , 일단은, 진행을 해볼 건데 처음에 할 때는 굉장히 코드가 좀 난잡하고 어지러울 수가 있긴 하지만 이 흐름을 잘 이해하시는 게 굉장히 중요합니다 , 이렇게, 해가지고 , 일단은, 간단한 개론을 해봤고 이제 이어서 코드 작업을 한번 진행을 해보도록 하겠습니다.